@{
    ViewData["Title"] = "Reportes";
    ViewData["NavbarTitle"] = "Reportes";
    ViewData["ActivePage"] = "Reportes";
    ViewData["ActiveMenu"] = "Reportes";
}

<style>
    .chart-container {
        position: relative;
        height: 300px;
    }
    .report-card:hover {
        transform: translateY(-2px);
        transition: all 0.2s;
    }
    .report-icon {
        width: 60px;
        height: 60px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
    }
    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    .bg-gradient-success {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }
    .bg-gradient-warning {
        background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
    }
    .bg-gradient-danger {
        background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
    }
</style>

<div id="reportes-app">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <h4 class="fw-bold">Generación de Reportes</h4>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="#">Inicio</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Reportes</li>
                </ol>
            </nav>
        </div>
    </div>

    <!-- Reportes Rápidos -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card h-100">
                <div class="card-header">
                    <h6 class="m-0 fw-bold">Reportes Rápidos</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <div class="card card-lift h-100 report-card">
                                <div class="card-body text-center">
                                    <div class="report-icon bg-gradient-primary text-white">
                                        <i class="bi bi-car-front fs-2"></i>
                                    </div>
                                    <h5 class="card-title">Vehículos Activos</h5>
                                    <p class="card-text">Listado completo de vehículos en flotilla</p>
                                    <button class="btn btn-sm btn-outline-primary" @@click="generarReporteRapido('vehicles')">
                                        <i class="bi bi-download me-1"></i> Generar
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="card card-lift h-100 report-card">
                                <div class="card-body text-center">
                                    <div class="report-icon bg-gradient-success text-white">
                                        <i class="bi bi-clipboard-check fs-2"></i>
                                    </div>
                                    <h5 class="card-title">Asignaciones Activas</h5>
                                    <p class="card-text">Vehículos asignados actualmente</p>
                                    <button class="btn btn-sm btn-outline-success" @@click="generarReporteRapido('assignments')">
                                        <i class="bi bi-download me-1"></i> Generar
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="card card-lift h-100 report-card">
                                <div class="card-body text-center">
                                    <div class="report-icon bg-gradient-warning text-white">
                                        <i class="bi bi-tools fs-2"></i>
                                    </div>
                                    <h5 class="card-title">Mantenimientos Pendientes</h5>
                                    <p class="card-text">Próximos mantenimientos programados</p>
                                    <button class="btn btn-sm btn-outline-warning" @@click="generarReporteRapido('maintenance')">
                                        <i class="bi bi-download me-1"></i> Generar
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="card card-lift h-100 report-card">
                                <div class="card-body text-center">
                                    <div class="report-icon bg-gradient-danger text-white">
                                        <i class="bi bi-shield-exclamation fs-2"></i>
                                    </div>
                                    <h5 class="card-title">Seguros por Vencer</h5>
                                    <p class="card-text">Pólizas con vencimiento próximo</p>
                                    <button class="btn btn-sm btn-outline-danger" @@click="generarReporteRapido('insurance')">
                                        <i class="bi bi-download me-1"></i> Generar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<!-- Gráficos y Estadísticas -->
<div class="row mb-4">
    <!-- Header de la sección -->
    <div class="col-12 mb-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h5 class="fw-bold mb-0">Gráficos y Estadísticas</h5>
                <small class="text-muted" v-if="ultimaActualizacionGraficos">
                    Última actualización: {{ formatearFecha(ultimaActualizacionGraficos) }}
                </small>
            </div>
            <button class="btn btn-sm btn-outline-primary" @@click="actualizarGraficos" :disabled="actualizandoGraficos">
                <span v-if="actualizandoGraficos" class="spinner-border spinner-border-sm me-1"></span>
                <i v-else class="bi bi-arrow-clockwise me-1"></i>
                {{ actualizandoGraficos ? 'Actualizando...' : 'Actualizar Gráficos' }}
            </button>
        </div>
    </div>
    
    <!-- Primera gráfica - Vehículos por Estado -->
    <div class="col-lg-6 mb-4">
        <div class="card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h6 class="m-0 fw-bold">Distribución de Vehículos por Estado</h6>
                <div class="dropdown">
                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" 
                            id="vehicleStatusFilter" data-bs-toggle="dropdown" aria-expanded="false">
                        {{ filtroGrafico.periodo }}
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="vehicleStatusFilter">
                        <li><a class="dropdown-item" href="#" @@click="cambiarPeriodoGrafico('Último mes')">Último mes</a></li>
                        <li><a class="dropdown-item" href="#" @@click="cambiarPeriodoGrafico('Últimos 6 meses')">Últimos 6 meses</a></li>
                        <li><a class="dropdown-item" href="#" @@click="cambiarPeriodoGrafico('Último año')">Último año</a></li>
                        <li><a class="dropdown-item" href="#" @@click="cambiarPeriodoGrafico('Todo el período')">Todo el período</a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="vehicleStatusChart" ref="vehicleStatusChart"></canvas>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Segunda gráfica - Costos de Mantenimiento -->
    <div class="col-lg-6 mb-4">
        <div class="card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h6 class="m-0 fw-bold">Costos de Mantenimiento por Mes</h6>
                <div class="dropdown">
                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" 
                            id="maintenanceCostFilter" data-bs-toggle="dropdown" aria-expanded="false">
                        {{ filtroGrafico.año }}
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="maintenanceCostFilter">
                        <li><a class="dropdown-item" href="#" @@click="cambiarAñoGrafico('2022')">2022</a></li>
                        <li><a class="dropdown-item" href="#" @@click="cambiarAñoGrafico('2023')">2023</a></li>
                        <li><a class="dropdown-item" href="#" @@click="cambiarAñoGrafico('2024')">2024</a></li>
                        <li><a class="dropdown-item" href="#" @@click="cambiarAñoGrafico('Comparar años')">Comparar años</a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="maintenanceCostChart" ref="maintenanceCostChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@*     <!-- Reportes Personalizados -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="m-0 fw-bold">Generar Reporte Personalizado</h6>
                    <button class="btn btn-sm btn-primary" @@click="generarReporte" :disabled="cargandoReporte">
                        <span v-if="cargandoReporte" class="spinner-border spinner-border-sm me-1" role="status"></span>
                        <i v-else class="bi bi-file-earmark-arrow-down me-1"></i>
                        {{ cargandoReporte ? 'Generando...' : 'Generar Reporte' }}
                    </button>
                </div>
                <div class="card-body">
                    <form @@submit.prevent="generarReporte">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="reportType" class="form-label">Tipo de Reporte <span class="text-danger">*</span></label>
                                <select class="form-select" id="reportType" v-model="reporteForm.tipo" required>
                                    <option value="" disabled>Seleccionar tipo...</option>
                                    <option value="vehicles">Vehículos</option>
                                    <option value="assignments">Asignaciones</option>
                                    <option value="maintenances">Mantenimientos</option>
                                    <option value="insurances">Seguros</option>
                                    <option value="documents">Documentos</option>
                                    <option value="custom">Personalizado</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="reportFormat" class="form-label">Formato <span class="text-danger">*</span></label>
                                <select class="form-select" id="reportFormat" v-model="reporteForm.formatoSalida" required>
                                    <option value="pdf">PDF</option>
                                    <option value="excel">Excel</option>
                                    <option value="csv">CSV</option>
                                    <option value="html">HTML</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="reportPeriod" class="form-label">Período</label>
                                <select class="form-select" id="reportPeriod" v-model="reporteForm.periodo" @@change="manejarCambioPeriodo">
                                    <option value="all">Todos los registros</option>
                                    <option value="today">Hoy</option>
                                    <option value="week">Esta semana</option>
                                    <option value="month">Este mes</option>
                                    <option value="quarter">Este trimestre</option>
                                    <option value="year">Este año</option>
                                    <option value="custom">Personalizado</option>
                                </select>
                            </div>
                        </div>

                        <!-- Rango de fechas personalizado -->
                        <div class="row mb-3" v-show="reporteForm.periodo === 'custom'">
                            <div class="col-md-6">
                                <label for="fechaDesde" class="form-label">Fecha Desde</label>
                                <input type="date" class="form-control" id="fechaDesde" v-model="reporteForm.fechaDesde">
                            </div>
                            <div class="col-md-6">
                                <label for="fechaHasta" class="form-label">Fecha Hasta</label>
                                <input type="date" class="form-control" id="fechaHasta" v-model="reporteForm.fechaHasta">
                            </div>
                        </div>

                        <!-- Filtros personalizados -->
                        <div class="row mb-3" v-show="reporteForm.tipo">
                            <div class="col-12">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="fw-bold mb-3">Filtros Avanzados</h6>
                                        <div class="row g-3">
                                            <!-- Filtros para vehículos -->
                                            <div class="col-md-4" v-show="reporteForm.tipo === 'vehicles' || reporteForm.tipo === 'custom'">
                                                <label for="vehicleStatus" class="form-label">Estado del Vehículo</label>
                                                <select class="form-select" id="vehicleStatus" v-model="reporteForm.estadoVehiculo" multiple>
                                                    <option value="Disponible">Disponible</option>
                                                    <option value="Asignado">Asignado</option>
                                                    <option value="EnTaller">En Taller</option>
                                                    <option value="NoDisponible">No Disponible</option>
                                                </select>
                                            </div>
                                            
                                            <!-- Filtros para asignaciones -->
                                            <div class="col-md-4" v-show="reporteForm.tipo === 'assignments' || reporteForm.tipo === 'custom'">
                                                <label for="assignmentStatus" class="form-label">Estado de Asignación</label>
                                                <select class="form-select" id="assignmentStatus" v-model="reporteForm.estadoAsignacion" multiple>
                                                    <option value="Activa">Activa</option>
                                                    <option value="Pendiente">Pendiente</option>
                                                    <option value="Completada">Completada</option>
                                                    <option value="Vencida">Vencida</option>
                                                </select>
                                            </div>

                                            <!-- Filtro de departamento -->
                                            <div class="col-md-4" v-show="reporteForm.tipo === 'assignments' || reporteForm.tipo === 'vehicles' || reporteForm.tipo === 'custom'">
                                                <label for="department" class="form-label">Departamento/Institución</label>
                                                <select class="form-select" id="department" v-model="reporteForm.departamento" multiple>
                                                    <option value="agriculture">Ministerio de Agricultura</option>
                                                    <option value="health">Ministerio de Salud</option>
                                                    <option value="education">Ministerio de Educación</option>
                                                    <option value="police">Policía Nacional</option>
                                                    <option value="other">Otra institución</option>
                                                </select>
                                            </div>

                                            <!-- Tipo de vehículo -->
                                            <div class="col-md-4" v-show="reporteForm.tipo === 'vehicles' || reporteForm.tipo === 'custom'">
                                                <label for="vehicleType" class="form-label">Tipo de Vehículo</label>
                                                <select class="form-select" id="vehicleType" v-model="reporteForm.tipoVehiculo" multiple>
                                                    <option value="Sedan">Sedán</option>  
                                                    <option value="SUV">SUV</option>
                                                    <option value="Pickup">Pickup</option>
                                                    <option value="Camioneta">Camioneta</option>
                                                    <option value="Motocicleta">Motocicleta</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <label for="reportNotes" class="form-label">Notas Adicionales</label>
                                <textarea class="form-control" id="reportNotes" v-model="reporteForm.notas" rows="2" 
                                          placeholder="Agregar comentarios o instrucciones especiales para el reporte"></textarea>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div> *@
    
    <!-- Historial de Reportes Generados -->
    <div class="row">
        <div class="col-12">
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="m-0 fw-bold">Historial de Reportes</h6>
                    <button class="btn btn-sm btn-outline-secondary" @@click="actualizarHistorial">
                        <i class="bi bi-arrow-clockwise"></i> Actualizar
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Nombre del Reporte</th>
                                    <th>Tipo</th>
                                    <th>Generado por</th>
                                    <th>Fecha</th>
                                    <th>Tamaño</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="reporte in historialReportes" :key="reporte.id">
                                    <td>{{ reporte.nombre }}</td>
                                    <td>
                                        <span :class="tipoReporteClass(reporte.tipo)" class="badge">
                                            {{ reporte.tipoNombre }}
                                        </span>
                                    </td>
                                    <td>{{ reporte.generadoPor }}</td>
                                    <td>{{ formatearFecha(reporte.fechaGeneracion) }}</td>
                                    <td>{{ reporte.tamaño }}</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary me-1" title="Descargar"
                                                @@click="descargarReporte(reporte)">
                                            <i class="bi bi-download"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary me-1" title="Ver detalles"
                                                @@click="verDetallesReporte(reporte)">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" title="Eliminar"
                                                @@click="eliminarReporte(reporte)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Paginación -->
                    <nav aria-label="Page navigation" v-if="totalPaginasHistorial > 1">
                        <ul class="pagination justify-content-center">
                            <li class="page-item" :class="{ disabled: paginaActualHistorial === 1 }">
                                <a class="page-link" href="#" @@click.prevent="cambiarPaginaHistorial(paginaActualHistorial - 1)">Anterior</a>
                            </li>
                            <li v-for="pagina in totalPaginasHistorial" :key="pagina" 
                                class="page-item" :class="{ active: pagina === paginaActualHistorial }">
                                <a class="page-link" href="#" @@click.prevent="cambiarPaginaHistorial(pagina)">{{ pagina }}</a>
                            </li>
                            <li class="page-item" :class="{ disabled: paginaActualHistorial === totalPaginasHistorial }">
                                <a class="page-link" href="#" @@click.prevent="cambiarPaginaHistorial(paginaActualHistorial + 1)">Siguiente</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>

        console.log('🔧 Verificando librerías...');
        console.log('Vue disponible:', typeof Vue !== 'undefined' ? '✅' : '❌');
        console.log('Chart.js disponible:', typeof Chart !== 'undefined' ? '✅' : '❌');

        const apiBase = "https://localhost:7037";
        
        new Vue({
            el: '#reportes-app',
            data: {
                reporteForm: {
                    tipo: '',
                    formatoSalida: 'pdf',
                    periodo: 'all',
                    fechaDesde: '',
                    fechaHasta: '',
                    estadoVehiculo: [],
                    estadoAsignacion: [],
                    departamento: [],
                    tipoVehiculo: [],
                    notas: ''
                },
                filtroGrafico: {
                    periodo: 'Últimos 6 meses',
                    año: '2023'
                },
                mostrarResultados: false,
                cargandoReporte: false,
                cargandoExport: false,
                columnasReporte: [],
                datosReporte: [],
                tituloReporte: '',
                historialReportes: [],
                paginaActualHistorial: 1,
                itemsPorPaginaHistorial: 10,
                vehicleStatusChart: null,
                maintenanceCostChart: null,
                ultimaActualizacionGraficos: null,
                actualizandoGraficos: false
            },
            computed: {
                totalPaginasHistorial() {
                    return Math.ceil(this.historialReportes.length / this.itemsPorPaginaHistorial);
                }
            },
            mounted() {
                console.log('🚀 App de reportes iniciada');
                this.cargarHistorialReportes();
                this.$nextTick(() => {
                    this.inicializarGraficos();
                });
            },
            methods: {
                async generarReporteRapido(tipo) {
                    console.log('🚀 Generando reporte rápido:', tipo);
                    
                    const boton = event.target.closest('button');
                    
                    // Cambiar estado del botón
                    this.cambiarEstadoBoton(boton, true, 'Generando...');
                    
                    try {
                        const resultado = await this.llamarAPIReporte(tipo);
                        this.procesarRespuestaReporte(resultado, tipo);
                        this.mostrarNotificacion('success', `Reporte generado exitosamente`);
                        
                    } catch (error) {
                        console.error('💥 Error:', error);
                        this.mostrarNotificacion('error', `Error: ${error.message}`);
                        
                    } finally {
                        // Siempre restaurar el botón
                        this.cambiarEstadoBoton(boton, false, 'Generar');
                    }
                },

                cambiarEstadoBoton(boton, cargando, texto) {
                    if (!boton) return;
                    
                    boton.disabled = cargando;
                    
                    if (cargando) {
                        boton.innerHTML = `<span class="spinner-border spinner-border-sm me-1"></span>${texto}`;
                    } else {
                        boton.innerHTML = `<i class="bi bi-download me-1"></i> ${texto}`;
                    }
                },

                async llamarAPIReporte(tipo) {
                    const apiUrls = {
                        'vehicles': '/api/Reportes/vehiculosActivos/excel',
                        'assignments': '/api/Reportes/asignacionesActivas/excel', 
                        'maintenance': '/api/Reportes/mantenimientosPendientes/excel',
                        'insurance': '/api/Reportes/segurosPorVencer/excel'
                    };
                    
                    const apiUrl = `${apiBase}${apiUrls[tipo]}`;
                    
                    const response = await fetch(apiUrl, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        }
                    });
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Error ${response.status}: ${errorText}`);
                    }
                    
                    const blob = await response.blob();
                    
                    if (blob.size === 0) {
                        throw new Error('El archivo recibido está vacío');
                    }
                    
                    return { blob, tipo };
                },

                procesarRespuestaReporte(resultado, tipo) {
                    const { blob } = resultado;
                    
                    const tipoNombres = {
                        'vehicles': 'Vehiculos_Activos',
                        'assignments': 'Asignaciones_Activas',
                        'maintenance': 'Mantenimientos_Pendientes', 
                        'insurance': 'Seguros_Por_Vencer'
                    };
                    
                    const fechaHoy = new Date().toISOString().slice(0, 10);
                    const nombreArchivo = `${tipoNombres[tipo]}_${fechaHoy}.xlsx`;
                    
                    // Descargar archivo
                    this.descargarArchivo(blob, nombreArchivo);
                    
                    // Agregar al historial
                    const nuevoReporte = {
                        id: Date.now(),
                        nombre: nombreArchivo,
                        tipo: tipo,
                        tipoNombre: this.obtenerTituloReporte(tipo),
                        generadoPor: 'Usuario Actual',
                        fechaGeneracion: new Date(),
                        tamaño: this.formatearTamaño(blob.size)
                    };
                    
                    this.historialReportes.unshift(nuevoReporte);
                },

                descargarArchivo(blob, nombreArchivo) {
                    try {
                        // Crear URL temporal para el blob
                        const url = window.URL.createObjectURL(blob);
                        
                        // Crear elemento <a> temporal para la descarga
                        const link = document.createElement('a');
                        link.href = url;
                        link.download = nombreArchivo;
                        link.style.display = 'none';
                        
                        // Agregar al DOM, hacer clic y remover
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        
                        // Limpiar URL temporal después de un momento
                        setTimeout(() => {
                            window.URL.revokeObjectURL(url);
                        }, 100);
                        
                        console.log('📥 Archivo descargado:', nombreArchivo);
                        
                    } catch (error) {
                        console.error('Error al descargar archivo:', error);
                        throw new Error('Error al descargar el archivo');
                    }
                },

                formatearTamaño(bytes) {
                    if (bytes === 0) return '0 Bytes';
                    const k = 1024;
                    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                    const i = Math.floor(Math.log(bytes) / Math.log(k));
                    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
                },

                mostrarNotificacion(tipo, mensaje) {
                    // Crear elemento de notificación
                    const notificacion = document.createElement('div');
                    notificacion.className = `alert alert-${tipo === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
                    notificacion.style.cssText = `
                        top: 20px;
                        right: 20px;
                        z-index: 9999;
                        min-width: 300px;
                        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    `;
                    
                    notificacion.innerHTML = `
                        <div class="d-flex align-items-center">
                            <i class="bi bi-${tipo === 'success' ? 'check-circle-fill' : 'exclamation-triangle-fill'} me-2"></i>
                            <div>${mensaje}</div>
                            <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert"></button>
                        </div>
                    `;
                    
                    // Agregar al DOM
                    document.body.appendChild(notificacion);
                    
                    // Auto-remover después de 5 segundos
                    setTimeout(() => {
                        if (notificacion.parentNode) {
                            notificacion.remove();
                        }
                    }, 5000);
                },

                manejarErrorAPI(response, tipo) {
                    let mensaje = '';
                    
                    switch (response.status) {
                        case 404:
                            mensaje = `No se encontraron datos para el reporte de ${this.obtenerTituloReporte(tipo)}`;
                            break;
                        case 500:
                            mensaje = 'Error interno del servidor. Intente nuevamente más tarde.';
                            break; 
                        case 401:
                            mensaje = 'No tiene permisos para generar este reporte.';
                            break;
                        case 403:
                            mensaje = 'Acceso denegado para este tipo de reporte.';
                            break;
                        default:
                            mensaje = `Error ${response.status} al generar el reporte.`;
                    }
                    
                    return mensaje;
                },

                obtenerTituloReporte(tipo) {
                    const titulos = {
                        'vehicles': 'Vehículos Activos',
                        'assignments': 'Asignaciones Activas', 
                        'maintenance': 'Mantenimientos Pendientes',
                        'insurance': 'Seguros por Vencer',
                        'maintenances': 'Mantenimientos',
                        'insurances': 'Seguros',
                        'documents': 'Documentos',
                        'custom': 'Personalizado'
                    };
                    return titulos[tipo] || 'Reporte';
                },

                // Resto de métodos simplificados para las funcionalidades que ya tienes
                async generarReporte() {
                    console.log('Generando reporte personalizado...');
                    // Implementar lógica del reporte personalizado aquí
                },
                
                manejarCambioPeriodo() {
                    if (this.reporteForm.periodo !== 'custom') {
                        this.reporteForm.fechaDesde = '';
                        this.reporteForm.fechaHasta = '';
                    }
                },
                
                cargarHistorialReportes() {
                    // Datos de ejemplo
                    this.historialReportes = [];
                },
                
                actualizarHistorial() {
                    this.cargarHistorialReportes();
                },
                
                // Métodos para gráficos (simplificados)
                async inicializarGraficos() {
                    console.log('📊 Inicializando gráficos...');
                    
                    try {
                        // Cargar datos para ambas gráficas
                        await this.cargarGraficoVehiculos();
                        await this.cargarGraficoMantenimientos();
                        
                        console.log('✅ Gráficos inicializados correctamente');
                    } catch (error) {
                        console.error('❌ Error al inicializar gráficos:', error);
                    }
                },
                async cargarGraficoVehiculos() {
                    try {
                        console.log('📊 Cargando datos de vehículos...');
                        
                        // Llamar a la API de vehículos activos
                        const response = await fetch(`${apiBase}/api/Reportes/vehiculosActivos`, {
                            method: 'GET',
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            }
                        });
                        
                        if (!response.ok) {
                            throw new Error(`Error ${response.status}: ${response.statusText}`);
                        }
                        
                        const data = await response.json();
                        console.log('📊 Datos de vehículos recibidos:', data);
                        
                        // Procesar datos para la gráfica
                        const estadisticas = this.procesarEstadisticasVehiculos(data.datos);
                        
                        // Crear/actualizar gráfica
                        this.crearGraficoVehiculos(estadisticas);
                        
                    } catch (error) {
                        console.error('❌ Error al cargar gráfico de vehículos:', error);
                        // Mostrar datos de ejemplo si falla la API
                        this.crearGraficoVehiculosEjemplo();
                    }
                },

                procesarEstadisticasVehiculos(vehiculos) {
                    const estadisticas = {
                        'Disponible': 0,
                        'Asignado': 0,
                        'EnTaller': 0,
                        'NoDisponible': 0,
                        'Otros': 0
                    };
                    
                    vehiculos.forEach(vehiculo => {
                        const estado = vehiculo.Estado || 'Otros';
                        if (estadisticas.hasOwnProperty(estado)) {
                            estadisticas[estado]++;
                        } else {
                            estadisticas['Otros']++;
                        }
                    });
                    
                    console.log('📊 Estadísticas procesadas:', estadisticas);
                    return estadisticas;
                },

                crearGraficoVehiculos(estadisticas) {
                    const ctx = document.getElementById('vehicleStatusChart');
                    if (!ctx) {
                        console.error('❌ No se encontró el canvas vehicleStatusChart');
                        return;
                    }
                    
                    // Destruir gráfica anterior si existe
                    if (this.vehicleStatusChart) {
                        this.vehicleStatusChart.destroy();
                    }
                    
                    const labels = [];
                    const data = [];
                    const backgroundColor = [];
                    const borderColor = [];
                    
                    // Configurar colores y datos
                    const colorMap = {
                        'Disponible': { bg: '#28a745', border: '#1e7e34' },
                        'Asignado': { bg: '#007bff', border: '#0056b3' },
                        'EnTaller': { bg: '#ffc107', border: '#d39e00' },
                        'NoDisponible': { bg: '#6c757d', border: '#545b62' },
                        'Otros': { bg: '#dc3545', border: '#bd2130' }
                    };
                    
                    Object.keys(estadisticas).forEach(estado => {
                        if (estadisticas[estado] > 0) {
                            labels.push(this.formatearEstadoVehiculo(estado));
                            data.push(estadisticas[estado]);
                            backgroundColor.push(colorMap[estado]?.bg || '#6c757d');
                            borderColor.push(colorMap[estado]?.border || '#545b62');
                        }
                    });
                    
                    this.vehicleStatusChart = new Chart(ctx, {
                        type: 'doughnut',
                        data: {
                            labels: labels,
                            datasets: [{
                                data: data,
                                backgroundColor: backgroundColor,
                                borderColor: borderColor,
                                borderWidth: 2,
                                hoverOffset: 4
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        usePointStyle: true,
                                        padding: 20
                                    }
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const label = context.label || '';
                                            const value = context.parsed || 0;
                                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                            const percentage = ((value / total) * 100).toFixed(1);
                                            return `${label}: ${value} (${percentage}%)`;
                                        }
                                    }
                                }
                            }
                        }
                    });
                    
                    console.log('✅ Gráfico de vehículos creado');
                },

                formatearEstadoVehiculo(estado) {
                    const estados = {
                        'Disponible': 'Disponibles',
                        'Asignado': 'Asignados',
                        'EnTaller': 'En Mantenimiento',
                        'NoDisponible': 'No Disponibles',
                        'Otros': 'Otros'
                    };
                    return estados[estado] || estado;
                },

                async cargarGraficoMantenimientos() {
                    try {
                        console.log('📊 Cargando datos de mantenimientos...');
                        
                        // Llamar a la API de mantenimientos pendientes
                        const response = await fetch(`${apiBase}/api/Reportes/mantenimientosPendientes`, {
                            method: 'GET',
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            }
                        });
                        
                        if (!response.ok) {
                            throw new Error(`Error ${response.status}: ${response.statusText}`);
                        }
                        
                        const data = await response.json();
                        console.log('📊 Datos de mantenimientos recibidos:', data);
                        
                        // Procesar datos para la gráfica
                        const costosPorMes = this.procesarCostosMantenimiento(data.datos);
                        
                        // Crear/actualizar gráfica
                        this.crearGraficoMantenimientos(costosPorMes);
                        
                    } catch (error) {
                        console.error('❌ Error al cargar gráfico de mantenimientos:', error);
                        // Mostrar datos de ejemplo si falla la API
                        this.crearGraficoMantenimientosEjemplo();
                    }
                },

                procesarCostosMantenimiento(mantenimientos) {
                    const costosPorMes = {};
                    const mesesDelAno = [
                        'Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',
                        'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'
                    ];
                    
                    // Inicializar todos los meses en 0
                    mesesDelAno.forEach(mes => {
                        costosPorMes[mes] = 0;
                    });
                    
                    // Procesar mantenimientos
                    mantenimientos.forEach(mantenimiento => {
                        if (mantenimiento.FechaInicio) {
                            const fecha = new Date(mantenimiento.FechaInicio);
                            const mes = mesesDelAno[fecha.getMonth()];
                            
                            // Por ahora usamos un costo estimado aleatorio ya que no viene en la API
                            // En tu caso real, deberías tener un campo de costo
                            const costoEstimado = Math.random() * 50000 + 10000; // Entre 10k y 60k
                            costosPorMes[mes] += costoEstimado;
                        }
                    });
                    
                    console.log('📊 Costos por mes procesados:', costosPorMes);
                    return costosPorMes;
                },

                crearGraficoMantenimientos(costosPorMes) {
                    const ctx = document.getElementById('maintenanceCostChart');
                    if (!ctx) {
                        console.error('❌ No se encontró el canvas maintenanceCostChart');
                        return;
                    }
                    
                    // Destruir gráfica anterior si existe
                    if (this.maintenanceCostChart) {
                        this.maintenanceCostChart.destroy();
                    }
                    
                    const labels = Object.keys(costosPorMes);
                    const data = Object.values(costosPorMes);
                    
                    this.maintenanceCostChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Costos de Mantenimiento (RD$)',
                                data: data,
                                backgroundColor: '#007bff',
                                borderColor: '#0056b3',
                                borderWidth: 1,
                                borderRadius: 4,
                                borderSkipped: false,
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'top',
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const value = context.parsed.y;
                                            return `${context.dataset.label}: RD$ ${value.toLocaleString('es-DO', {
                                                minimumFractionDigits: 2,
                                                maximumFractionDigits: 2
                                            })}`;
                                        }
                                    }
                                }
                            },
                            scales: {
                                x: {
                                    grid: {
                                        display: false
                                    }
                                },
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        callback: function(value) {
                                            return 'RD$ ' + value.toLocaleString('es-DO');
                                        }
                                    }
                                }
                            }
                        }
                    });
                    
                    console.log('✅ Gráfico de mantenimientos creado');
                },

                crearGraficoVehiculosEjemplo() {
                    console.log('📊 Creando gráfico de vehículos con datos de ejemplo');
                    
                    const estadisticasEjemplo = {
                        'Disponible': 15,
                        'Asignado': 8,
                        'EnTaller': 3,
                        'NoDisponible': 2
                    };
                    
                    this.crearGraficoVehiculos(estadisticasEjemplo);
                },

                crearGraficoMantenimientosEjemplo() {
                    console.log('📊 Creando gráfico de mantenimientos con datos de ejemplo');
                    
                    const costosEjemplo = {
                        'Ene': 125000,
                        'Feb': 98000,
                        'Mar': 145000,
                        'Abr': 110000,
                        'May': 155000,
                        'Jun': 135000,
                        'Jul': 148000,
                        'Ago': 0,
                        'Sep': 0,
                        'Oct': 0,
                        'Nov': 0,
                        'Dic': 0
                    };
                    
                    this.crearGraficoMantenimientos(costosEjemplo);
                },

                cambiarPeriodoGrafico(periodo) {
                    console.log('📊 Cambiando período gráfico a:', periodo);
                    this.filtroGrafico.periodo = periodo;
                    
                    // Recargar gráfico de vehículos con nuevo filtro
                    this.cargarGraficoVehiculos();
                },

                cambiarAñoGrafico(año) {
                    console.log('📊 Cambiando año gráfico a:', año);
                    this.filtroGrafico.año = año;
                    
                    // Recargar gráfico de mantenimientos con nuevo filtro
                    this.cargarGraficoMantenimientos();
                },

                async actualizarGraficos() {
                    console.log('🔄 Actualizando gráficos...');
                    this.actualizandoGraficos = true;
                    
                    try {
                        await this.cargarGraficoVehiculos();
                        await this.cargarGraficoMantenimientos();
                        
                        this.ultimaActualizacionGraficos = new Date();
                        this.mostrarNotificacion('success', 'Gráficos actualizados correctamente');
                    } catch (error) {
                        console.error('❌ Error al actualizar gráficos:', error);
                        this.mostrarNotificacion('error', 'Error al actualizar los gráficos');
                    } finally {
                        this.actualizandoGraficos = false;
                    }
                },
                
                
                // Métodos para historial
                tipoReporteClass(tipo) {
                    const clases = {
                        'vehicles': 'bg-primary',
                        'assignments': 'bg-success',
                        'maintenance': 'bg-warning',
                        'insurance': 'bg-danger',
                        'documents': 'bg-info',
                        'custom': 'bg-secondary'
                    };
                    return clases[tipo] || 'bg-secondary';
                },
                
                formatearFecha(fecha) {
                    return new Date(fecha).toLocaleString('es-ES');
                },
                
                cambiarPaginaHistorial(pagina) {
                    if (pagina >= 1 && pagina <= this.totalPaginasHistorial) {
                        this.paginaActualHistorial = pagina;
                    }
                },
                
                descargarReporte(reporte) {
                    alert(`Descargando: ${reporte.nombre}`);
                },
                
                verDetallesReporte(reporte) {
                    alert(`Ver detalles de: ${reporte.nombre}`);
                },
                
                eliminarReporte(reporte) {
                    if (confirm(`¿Está seguro de eliminar el reporte "${reporte.nombre}"?`)) {
                        const index = this.historialReportes.findIndex(r => r.id === reporte.id);
                        if (index !== -1) {
                            this.historialReportes.splice(index, 1);
                        }
                    }
                },
                // Método temporal para debug
                testGraficos() {
                    console.log('🧪 Probando gráficos...');
                    console.log('Chart.js disponible:', typeof Chart !== 'undefined');
                    console.log('Canvas vehicleStatusChart:', document.getElementById('vehicleStatusChart'));
                    console.log('Canvas maintenanceCostChart:', document.getElementById('maintenanceCostChart'));
                    
                    // Probar con datos de ejemplo directamente
                    this.crearGraficoVehiculosEjemplo();
                    this.crearGraficoMantenimientosEjemplo();
                }
            }
        });
    </script>
}